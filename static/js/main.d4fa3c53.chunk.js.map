{"version":3,"sources":["components/navbar/navbar.jsx","components/header/header.jsx","components/images/images.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["Navbar","react_default","a","createElement","Fragment","className","href","this","score","topscore","React","Component","Header","Images","_this","src","props","image","alt","name","onClick","App","state","topScore","maxScore","message","messageClass","characters","handleGame","resetGame","map","char","isClicked","console","log","Object","objectSpread","setState","handleCharacters","character","components_images_images","key","id","navbar_navbar","header_header","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"syCAkBeA,0LAbP,OACIC,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACIH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,UACXJ,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGG,KAAK,KAAR,qBACJL,EAAAC,EAAAC,cAAA,oBAAYI,KAAKC,MAAjB,iBAAsCD,KAAKE,oBAP9CC,IAAMC,YCaZC,0LAXP,OACIX,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACIH,EAAAC,EAAAC,cAAA,UAAQE,UAAU,UACdJ,EAAAC,EAAAC,cAAA,kDACAF,EAAAC,EAAAC,cAAA,6IANCO,IAAMC,YCeZE,0LAdL,IAAAC,EAAAP,KACR,OACCN,EAAAC,EAAAC,cAAA,OACCE,UAAU,cACVU,IAAKR,KAAKS,MAAMC,MAChBC,IAAKX,KAAKS,MAAMG,KAChBA,KAAMZ,KAAKS,MAAMG,KACjBC,QAAS,kBAAMN,EAAKE,MAAMI,QAAQN,EAAKE,MAAMG,gBAR5BT,IAAMC,mBCoEZU,oNA3DbC,MAAQ,CACNd,MAAO,EACPe,SAAU,EACVC,SAAU,GACVC,QAAS,iCACTC,aAAc,GACdC,WAAYA,KAGdC,WAAa,SAACT,GACZ,IAAIU,GAAY,EACVF,EAAab,EAAKQ,MAAMK,WAAWG,IAAI,SAAAC,GAC3C,OAAIA,EAAKZ,OAASA,GACO,IAAnBY,EAAKC,WAEPC,QAAQC,IAAI,SACLC,OAAAC,EAAA,EAAAD,CAAA,GAAKJ,EAAZ,CAAkBC,WAAW,MAE7BH,GAAY,EACLM,OAAAC,EAAA,EAAAD,CAAA,GAAKJ,EAAZ,CAAkBC,WAAW,KAG1BD,IAGLF,GACFf,EAAKuB,SAAS,CAAEV,WAAYb,EAAKwB,iBAAiBX,QAMtDW,iBAAmB,WACjB,OAAOxB,EAAKQ,MAAMK,WAAWG,IAAI,SAACS,GAAD,OAC/BtC,EAAAC,EAAAC,cAACqC,EAAD,CACEvB,MAAOsB,EAAUtB,MACjBE,KAAMoB,EAAUpB,KAChBsB,IAAKF,EAAUG,GACftB,QAASN,EAAKc,wFAMlB,OACE3B,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAACwC,EAAD,CACEnC,MAAOD,KAAKe,MAAMd,MAClBC,SAAUF,KAAKe,MAAMC,WAEvBtB,EAAAC,EAAAC,cAACyC,EAAD,MACA3C,EAAAC,EAAAC,cAAA,OAAKE,UAAU,WACZE,KAAK+B,4BAtDE5B,IAAMC,YCEJkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlD,EAAAC,EAAAC,cAACiD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d4fa3c53.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./navbar.css\";\n\nclass Navbar extends React.Component {\n    render() {\n        return (\n            <React.Fragment>\n                <nav className=\"navbar\">\n                    <ul>\n                        <li><a href=\"/\">React Click Game</a></li>\n                        <li>Score: {this.score} | Top Score: {this.topscore}</li>\n                    </ul>\n                </nav>\n            </React.Fragment >\n        )\n    }\n}\n\nexport default Navbar;","import React from \"react\";\nimport \"./header.css\";\n\nclass Header extends React.Component {\n    render() {\n        return (\n            <React.Fragment>\n                <header className=\"header\">\n                    <h1>Welcome to Westeros React Click Game</h1>\n                    <h3>Click on a character once and only once to defeat the Night King, if you click twice then Winter takes the 7 Kingdoms!</h3>\n                </header>\n            </React.Fragment >\n        )\n    }\n}\n\nexport default Header;","import React from \"react\";\nimport \"./images.css\";\n\nclass Images extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<img\n\t\t\t\tclassName=\"click-image\"\n\t\t\t\tsrc={this.props.image}\n\t\t\t\talt={this.props.name}\n\t\t\t\tname={this.props.name}\n\t\t\t\tonClick={() => this.props.onClick(this.props.name)}\n\n\t\t\t/>\n\t\t)\n\t}\n}\n\nexport default Images;","import React from 'react';\nimport Navbar from \"./components/navbar/navbar\"\nimport Header from \"./components/header/header\"\n// import Content from \"./components/content/content\"\nimport Images from \"./components/images/images\"\nimport characters from \"./characters.json\"\n\nimport './App.css';\n\n// setting up as a classful component instead of a functional component\nclass App extends React.Component {\n\n  state = {\n    score: 0,\n    topScore: 0,\n    maxScore: 12,\n    message: \"Click on a character to begin!\",\n    messageClass: \"\",\n    characters: characters\n  };\n\n  handleGame = (name) => {\n    let resetGame = false;\n    const characters = this.state.characters.map(char => {\n      if (char.name === name) {\n        if (char.isClicked === false) {\n          // this.handleCorrect()\n          console.log(\"click\")\n          return { ...char, isClicked: true }\n        } else {\n          resetGame = true;\n          return { ...char, isClicked: false }\n        }\n      }\n      return char\n    })\n\n    if (resetGame) {\n      this.setState({ characters: this.handleCharacters(characters) });\n    }\n  }\n\n\n\n  handleCharacters = () => {\n    return this.state.characters.map((character) =>\n      <Images\n        image={character.image}\n        name={character.name}\n        key={character.id}\n        onClick={this.handleGame}\n      />\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Navbar\n          score={this.state.score}\n          topscore={this.state.topScore}\n        />\n        <Header />\n        <div className=\"content\">\n          {this.handleCharacters()}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}