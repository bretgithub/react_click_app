{"version":3,"sources":["components/navbar/navbar.jsx","components/header/header.jsx","components/images/images.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["Navbar","react_default","a","createElement","Fragment","className","href","this","props","messageClass","message","score","topScore","React","Component","Header","Images","_this","src","image","alt","name","onClick","App","state","maxScore","characters","shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","handleGame","resetGame","map","char","isClicked","handleCorrect","console","log","Object","objectSpread","setState","handleIncorrect","handleWin","currentCharacters","ch","handleCharacters","character","components_images_images","key","id","navbar_navbar","header_header","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d971edd8.chunk.js","sourcesContent":["// Required dependencies and imports\nimport React from \"react\";\nimport \"./navbar.css\";\n\n// Set as a classful component\nclass Navbar extends React.Component {\n    render() {\n        return (\n            <React.Fragment>\n                <nav className=\"navbar\">\n                    <ul>\n                        {/* Text to user */}\n                        <li><a href=\"https://github.com/bretgithub/react_click_app\">React Click Game</a></li>\n                        <li className=\"mobile-contact\"><a href=\"mailto:bret.allan@gmail.com?subject=I love your work on React!&body=Hi Bret, I'd love to speak with you about..\">Contact Me</a></li>\n                        <li className={this.props.messageClass}>{this.props.message}</li>\n                        <li>Score: {this.props.score} | Top Score: {this.props.topScore}</li>\n\n                    </ul>\n                </nav>\n            </React.Fragment >\n        )\n    }\n}\n\nexport default Navbar;","// Required dependencies and imports\nimport React from \"react\";\nimport \"./header.css\";\n\n// Set as a classful component\nclass Header extends React.Component {\n    render() {\n        return (\n            <React.Fragment>\n                <header className=\"header\">\n                    <h1>Welcome to Westeros React Click Game</h1>\n                    <h3>Click on a character once and only once to defeat the Night King, if you click twice then Winter takes the 7 Kingdoms!</h3>\n                </header>\n            </React.Fragment >\n        )\n    }\n}\n\nexport default Header;","// Required dependencies and imports\nimport React from \"react\";\nimport \"./images.css\";\n\n// Set as a classful component\nclass Images extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<img\n\t\t\t\t// Image properties \n\t\t\t\tclassName=\"click-image\"\n\t\t\t\tsrc={this.props.image}\n\t\t\t\talt={this.props.name}\n\t\t\t\tname={this.props.name}\n\t\t\t\tonClick={() => this.props.onClick(this.props.name)}\n\n\t\t\t/>\n\t\t)\n\t}\n}\n\nexport default Images;","// Required dependecies and imports\nimport React from 'react';\nimport Navbar from \"./components/navbar/navbar\"\nimport Header from \"./components/header/header\"\nimport Images from \"./components/images/images\"\nimport characters from \"./characters.json\"\nimport './App.css';\n\n// Setting up as a classful component instead of a functional component\nclass App extends React.Component {\n\n  // Set state object \n  state = {\n    score: 0,\n    topScore: 0,\n    maxScore: 12,\n    message: \"Click on a character to begin!\",\n    messageClass: \"\",\n    characters: characters\n  };\n\n  // Shuffle method to shuffle images around on screen\n  shuffle = (array) => {\n    let currentIndex = array.length;\n    let temporaryValue;\n    let randomIndex;\n\n    // While there are images to shuffle there \n    while (0 !== currentIndex) {\n\n      // At random pick an image\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      // Swap with another image\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n    // Return the array\n    return array;\n  }\n\n  // Game method \n  handleGame = (name) => {\n    let resetGame = false;\n    const characters = this.state.characters.map(char => {\n      // If image is clicked \n      if (char.name === name) {\n        // If character image isClicked is false\n        if (char.isClicked === false) {\n          // Run handleCorrect method\n          this.handleCorrect()\n          // Log to see if click works\n          console.log(\"click\")\n          // Change value of isClicked from false to true\n          return { ...char, isClicked: true }\n        } else {\n          // Reset the game if you click an image that is isClicked is true\n          resetGame = true;\n          // Change value of isClicked back to false\n          return { ...char, isClicked: false }\n        }\n      }\n      // Return char\n      return char\n    })\n\n    // Handle game reset \n    if (resetGame) {\n      this.setState({\n        characters: this.shuffle(this.handleIncorrect()),\n        messageClass: \"incorrect\",\n      })\n\n    } else {\n      // Check if game is won before rendering characters\n      this.setState({ characters: this.shuffle(this.handleWin(characters)) })\n    }\n  }\n\n  // Correct selection method handleCorrect\n  handleCorrect = () => {\n    // Handles if your score is above topScore\n    if (this.state.score + 1 > this.state.topScore) {\n      // Sets state to reflect new top score\n      this.setState({ topScore: this.state.topScore + 1 })\n    }\n    // Handles win\n    if (this.state.score === this.state.maxScore) {\n      // Sets state to handle win with message\n      this.setState({ score: this.state.score + 1, message: \"You've won, you saved the 7 Kingdoms\", messageClass: \"correct\" })\n    }\n    else {\n      // Sets state with update of score and message\n      this.setState({ score: this.state.score + 1, message: \"You've guessed correctly\", messageClass: \"correct\" })\n    }\n  }\n\n  // Win method handleWin\n  handleWin = (currentCharacters) => {\n    // If current score is at max reset score to 0 and topScore to 0, game reset\n    if (this.state.score + 1 === this.state.maxScore) {\n      this.setState({ score: 0, topScore: 0 })\n      // Reset clicked state for characters\n      const updatedCharacters = currentCharacters.map(ch => (true) ? { ...ch, isClicked: false } : ch)\n      return updatedCharacters\n    } else {\n      return currentCharacters\n    }\n  }\n\n  // Incorrect method handleIncorrect\n  handleIncorrect = () => {\n    // Incorrect selection made, reset score to 0\n    this.setState({ score: 0, message: \"You guessed incorrectly, Winter is here\" })\n    // Reset clicked state for characters\n    const updatedCharacters = this.state.characters.map(ch => ch.isClicked === true ? { ...ch, isClicked: false } : ch)\n    return updatedCharacters\n  }\n\n  // Character display method handleCharacters\n  handleCharacters = () => {\n    return this.state.characters.map((character) =>\n      // Display images with properties, set in characters.json\n      <Images\n        image={character.image}\n        name={character.name}\n        key={character.id}\n        onClick={this.handleGame}\n      />\n    );\n  }\n\n  // Render page\n  render() {\n    return (\n      <div className=\"App\">\n        {/* Navbar classful component */}\n        <Navbar\n          // Display information to the user\n          score={this.state.score}\n          topScore={this.state.topScore}\n          message={this.state.message}\n          messageClass={this.state.messageClass}\n        />\n        {/* Header classful component */}\n        <Header />\n        <div className=\"content\">\n          {/* Display characters */}\n          {this.handleCharacters()}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}